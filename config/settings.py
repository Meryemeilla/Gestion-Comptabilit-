"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url
from decouple import config

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Ajoute MSYS2 aux variables d'environnement
os.environ['PATH'] = r'C:\msys64\mingw64\bin;' + os.environ['PATH']
os.environ['FONTCONFIG_PATH'] = r'C:\msys64\mingw64\etc\fonts'


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-1c$r(brx+4x7hihfq)cn3pvoypv0ud&cd-f6c%zvf5(1aq#w))'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'whitenoise',
    'comptables',
    'dossiers',
    'fiscal',
    'honoraires',
    'juridique',
    'api',
    'rest_framework',
    'rest_framework_simplejwt',
    'django_filters',
    'cabinet',
    'utilisateurs.apps.UtilisateursConfig',
    'crispy_forms',
    'crispy_bootstrap5',
    'reclamations.apps.ReclamationsConfig',
    'django.contrib.sites',
]
SITE_ID = 1

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

AUTH_USER_MODEL = 'utilisateurs.Utilisateur'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'), os.path.join(BASE_DIR, 'templates', 'base'), os.path.join(BASE_DIR, 'envGestion', 'Lib', 'site-packages', 'crispy_bootstrap5', 'templates')],


        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'libraries': {
                'crispy_forms_tags': 'crispy_forms.templatetags.crispy_forms_tags',
            }
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# Configuration avancée pour la délivrabilité
EMAIL_HEADERS = {
    'X-Universite-Approved': 'true',
    'List-Unsubscribe': '<mailto:contact@cabinet-comptable.com>',
}
# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

from urllib.parse import urlparse

DATABASE_URL = os.getenv('DATABASE_URL')

if DATABASE_URL:
    url = urlparse(DATABASE_URL)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': url.path[1:],
            'USER': url.username,
            'PASSWORD': url.password,
            'HOST': url.hostname,
            'PORT': url.port,
        }
    }
else:
    # Fallback for development or if DATABASE_URL is not set
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
MIDDLEWARE.insert(1, 'whitenoise.middleware.WhiteNoiseMiddleware')
ALLOWED_HOSTS = ['*']


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
# settings.py
DATE_INPUT_FORMATS = [
    '%Y-%m-%d',  # Format ISO (requis pour les inputs HTML de type 'date')
    '%d/%m/%Y',  # Format français
    '%d/%m/%y',  # Format français court
]

DATE_FORMAT = 'd/m/Y'  # Format d'affichage
USE_L10N = False  # Désactive la localisation automatique pour les dates
LOGIN_REDIRECT_URL = '/dashboard/'  # ou la page après connexion
LOGIN_URL = '/accounts/login/'  # gardez cette valeur par défaut
LOGOUT_REDIRECT_URL = '/accounts/login/'
# LOGGING - Traçabilité et audit
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'audit.log'),
            'formatter': 'verbose',
        },
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'mail_logs': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'mail.log',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'audit': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'



# Configuration Redis pour Celery
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'

# Autres paramètres Celery possibles (optionnel)
CELERY_ACCEPT_CONTENT = ['json']
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

EMAIL_HOST = 'smtp.gmail.com'  # Utilisez directement les serveurs Google
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'elm41994@gmail.com'  # Doit être un compte Google Workspace vérifié
EMAIL_HOST_PASSWORD = 'pluzfmegezafoiuv'  # Mot de passe d'application généré
# Dans settings.py, corrigez :
DEFAULT_FROM_EMAIL = 'elm41994@gmail.com'  # Doit correspondre à EMAIL_HOST_USER
ADMIN_EMAIL = 'meryemell355@gmail.com'
from celery.schedules import crontab

CELERY_BEAT_SCHEDULE = {
    'send-tva-reminders': {
        'task': 'reclamations.tasks.send_rappel_tva_task',
        'schedule': crontab(hour=9, minute=0, day_of_week='1-5'),  # Lundi à Vendredi à 9h
    },
    'send-monthly-reports': {
        'task': 'comptables.tasks.send_monthly_reports_task',
        'schedule': crontab(day_of_month=1, hour=8),  # 1er du mois à 8h
    },
}

INSTALLED_APPS += ['django_celery_beat']
CELERY_BEAT_SCHEDULE = {
    'send-tva-reminders': {
        'task': 'reclamations.tasks.send_rappel_tva_task',
        'schedule': crontab(hour=9, minute=0, day_of_week='1-5'),
    },
}

# Pour que celery beat utilise la base de données
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
EMAIL_USE_LOCALTIME = True
