# Generated by Django 4.2.7 on 2025-06-18 11:39

from django.db import migrations


def create_user_groups(apps, schema_editor):
    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')
    User = apps.get_model('utilisateurs', 'Utilisateur')
    ContentType = apps.get_model('contenttypes', 'ContentType')

    # Modèles par application pour les permissions des Comptables
    # Note: Assurez-vous que les noms d'application et de modèle sont exacts.
    # Vous devrez peut-être importer les modèles directement si apps.get_model ne fonctionne pas comme prévu
    # pour les modèles d'autres applications dans des migrations plus anciennes de Django.
    # Cependant, pour Django 3.2+, apps.get_model('app_label', 'ModelName') est la voie à suivre.

    comptable_models_perms = {
        'dossiers': ['Dossier'],
        'fiscal': ['SuiviTVA', 'Acompte', 'CMIR', 'DepotBilan'], # Ajoutez d'autres modèles si nécessaire
        'juridique': ['JuridiqueCreation'], # Ajoutez d'autres modèles si nécessaire
        'reclamations': ['Reclamation'],
        'honoraires': ['Honoraire', 'ReglementHonoraire', 'HonorairePV', 'ReglementHonorairePV'],
        'comptables': ['Comptable'], # Pour la vue seulement
    }

    # Créer le groupe Administrateurs et lui donner toutes les permissions
    admin_group, created = Group.objects.get_or_create(name='Administrateurs')
    if created:
        all_permissions = Permission.objects.all()
        admin_group.permissions.set(all_permissions)

    # Créer le groupe Comptables et lui donner des permissions spécifiques
    comptable_group, created = Group.objects.get_or_create(name='Comptables')
    if created:
        permissions_for_comptable = []
        for app_label, model_names in comptable_models_perms.items():
            for model_name in model_names:
                try:
                    model_content_type = ContentType.objects.get(
                        app_label=app_label,
                        model=model_name.lower() # Les noms de modèles sont généralement en minuscules ici
                    )
                    model_permissions = Permission.objects.filter(content_type=model_content_type)
                    if app_label == 'comptables' and model_name == 'Comptable': # Vue seulement pour Comptable
                        view_perm = model_permissions.filter(codename='view_comptable')
                        permissions_for_comptable.extend(list(view_perm))
                    elif app_label == 'dossiers' and model_name == 'Dossier': # Add, View, Change pour Dossier
                        dossier_perms = model_permissions.filter(codename__in=['add_dossier', 'view_dossier', 'change_dossier'])
                        permissions_for_comptable.extend(list(dossier_perms))
                    else: # CRUD pour les autres modèles assignés (par défaut)
                        permissions_for_comptable.extend(list(model_permissions))
                except ContentType.DoesNotExist:
                    print(f"Attention : ContentType pour {app_label}.{model_name} non trouvé. Vérifiez les noms.")
        comptable_group.permissions.set(permissions_for_comptable)

    # Créer un utilisateur administrateur par défaut et l'ajouter au groupe Administrateurs
    if not User.objects.filter(username='admin_cabinet').exists():
        admin_user = User.objects.create_superuser('admin_cabinet', 'admin@example.com', 'password123')
        admin_user.groups.add(admin_group)
    else:
        # S'assurer que l'admin existant est dans le bon groupe (au cas où la migration est rejouée)
        admin_user = User.objects.get(username='admin_cabinet')
        if not admin_user.groups.filter(name='Administrateurs').exists():
            admin_user.groups.add(admin_group)

def remove_user_groups(apps, schema_editor):
    Group.objects.filter(name__in=['Administrateurs', 'Comptables']).delete()
    User.objects.filter(username='admin_cabinet').delete()

class Migration(migrations.Migration):

    dependencies = [
        ('comptables', '0003_rename_immatricule_comptable_matricule'),
        ('auth', '0001_initial'), # Assurez-vous que les migrations de base de auth sont appliquées
        ('contenttypes', '0001_initial'), # Dépendance pour ContentType
        # Ajoutez des dépendances explicites aux dernières migrations des applications concernées
        # si vous utilisez apps.get_model pour des modèles de ces applications.
        # Exemple: ('dossiers', 'xxxx_latest_migration_dossiers'),
        # Pour l'instant, nous utilisons ContentType.objects.get qui ne nécessite pas cela ici.
    ]

    operations = [
        migrations.RunPython(create_user_groups, remove_user_groups),
    ]
